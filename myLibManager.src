myLibManager = {}
myLibManager.print = @print
myLibManager.shell = get_shell
myLibManager.current_path = current_path

myLibManager.randInt = function(len=10)
	myInt = ""
	for i in range(0, len-1)
		myInt = myInt + floor(rnd()*10)
	end for

	return myInt
end function

myLibManager.randStr = function(len=10)
	alphabet = "abcdefghijklmnopqrstuvwxyz"

	myStr = ""
	for i in range(0, len-1)
		rInt = floor(rnd()*100)
		while rInt > 25
			rInt = rInt - 26
		end while
		
		myStr = myStr + alphabet[rInt]
	end for

	return myStr
end function

myLibManager.getNewKey = function(usedKeys, str=true)

	if str then newKey = self.randStr()
	if not str then newKey = self.randInt()
	if usedKeys.indexOf(newKey) == null  then
		return newKey
	else 
		return self.getNewKey(usedKeys, str)
	end if
	
end function

myLibManager.export = function(functions)
	if typeof(functions) == typeof({}) then
		get_custom_object[params[0]] = functions
	else
		self.print("Export Failed, type not Map")
	end if
end function

myLibManager.import = function(libPath)
	customObjectKeys = indexes(get_custom_object)
	libKey = self.getNewKey(customObjectKeys)
	get_custom_object[libKey] = {}
	self.shell.launch(libPath, libKey)
	libObj = get_custom_object[libKey]
	get_custom_object.remove(libKey)
	return libObj
end function

myLibManager.rsExecute = function(func, args=[], env={}, disabled=[], rmFile=true, fPath="") //restricted scope
	if typeof(args) != "list" then args = [args]
	if typeof(disabled) != "list" then disabled = [disabled]
	if not fPath then fPath = self.current_path
	//create file
	fileName = self.getNewKey(self.shell.host_computer.File(fPath).get_files()) + ".src"
	self.shell.host_computer.touch(fPath, fileName)
	rsFile = self.shell.host_computer.File(fPath + "/" +fileName)
	
	if rsFile == null then
		print("No permssions in: " + fPath)
		return -1
	end if
	//create custom object
	key = self.getNewKey(indexes(get_custom_object))
	get_custom_object[key] = {}

	usedNames = []
	
	//disable built-in objects
	content = ""
	for objName in disabled
		content = content + "globals[""" + objName + """]=null" + char(10)
	end for

	//add variables
	for envVar in env.indexes
		get_custom_object[key][envVar] = env[envVar]
		content = content + envVar + "=get_custom_object[""" + key + """][""" + envVar + """]" + char(10)
		usedNames.push(envVar)
	end for
	
	funcKey = self.getNewKey(get_custom_object[key].indexes)
	get_custom_object[key][funcKey] = @func
	returnKey = self.getNewKey(get_custom_object[key].indexes)
	get_custom_object[key].push(returnKey)
	argKey = self.getNewKey(get_custom_object[key].indexes)
	get_custom_object[key][argKey] = args
	
	//function exection
	functionCall = self.getNewKey(usedNames)
	content = content + functionCall + "=@get_custom_object[""" + key + """]["""+ funcKey +"""]" + char(10)
	content = content + "get_custom_object[""" + key +"""][""" + returnKey + """]="
	content = content + functionCall + "("
	if args.len !=0 then
		for i in range(0, get_custom_object[key][argKey].len - 1)
			content = content + "get_custom_object[""" +key+ """][""" +argKey+ """][" +i+ "]" + ","
		end for
		content = content[:-1]
	end if
	content = content + ")" + char(10)


	//run and delete files
	rsFile.set_content(content)
	if self.shell.build(current_path + "/" + fileName, current_path) != "" then
		print("Build Error: " + self.shell.build(current_path + "/" + fileName, current_path))
		return -1
	end if
	self.shell.launch(current_path + "/" + fileName[:-4])

	if rmFile == true then
		rsFile.delete()
		self.shell.host_computer.File(current_path + "/" + fileName[:-4]).delete()
	end if

	return get_custom_object[key][returnKey]
end function
